#include <iostream>
using namespace std;

int main()
{
    //--------------------------------------------------------------------------
    // Одномерные массивы
    // тип имя_массива[количество элемнетов];  - объявление массива
    // количество элементов - это константа

    // const int N = 10;
    // int k = 10;
    ////int mas[k]; // ошибка
    // int mas[N]; // Объявление массива

    // mas[0] = 162;
    // cout << mas[0] << "  " << mas[1] << endl; //  mas[0] - обращение к первому элементу массива

    // cout << "\nОбъем памяти под массив в байтах: " << sizeof(mas) << endl << N * sizeof(int)<< endl; // 40

    //--------------------------------------------------------------------------
    // Вариант 1 - Объявление и инициализация массива на этапе разработки

    // const int S = 5;
    ////double price[S] {45.32, 69.125, 4578.45};
    // double price[S] {45.32};

    ////cout << price[1] << endl;

    //// Вывод массива на экран:
    // for (int i = 0; i < S; i++) //i <= S;   Выход за пределы массива
    //{
    //	cout << price[i] << "\t";
    // }

    //--------------------------------------------------------------------------
    // Вариант 2 Объявление и инициализация массива без указания количества элементов

    // char math_oper[]{ '+','-','*','/','%'};

    // cout << "\nОбъем памяти под массив в байтах: " << sizeof(math_oper) << endl;//5
    // int count = sizeof(math_oper) / sizeof(math_oper[0]);

    //// Вывод массива на экран:
    // for (int i = 0; i < count; i++)
    //{
    //	cout << math_oper[i] << "  ";
    // }

    //--------------------------------------------------------------------------
    //Вариант 3 Инициализация значений массива с клавиатуры

    // const int M = 5;
    // double marks[M];

    // cout << "\nВведи данные массива: \n";
    // for (int i = 0; i < M; i++) // i <= M; выход за пределы массива, вылет по exception
    //{
    //	cout << i + 1 << ": ";
    //	cin >> marks[i];
    // }

    //// Вывод массива на экран:
    // cout << "\nДанные массива: \n";
    // for (int i = 0; i < M; i++)
    //{
    //	cout << marks[i] << "  ";
    // }

    // cout << endl << "\nАдрес первого элемента массива: "<< marks << " = " << &marks[0];
    ////& - операция взятия адреса
    //
    // cout << "\nАдреса данные массива: \n";
    // for (int i = 0; i < M; i++)
    //{
    //	cout << &marks[i] << "  ";
    //}
    cout << endl;
    //--------------------------------------------------------------------------
    /*
    Объявить массив целого типа размером 20 элементов
    и программно проинициализировать числами
    в возрастающем порядке от 1 до 20.
    Вывести массив на экран в прямой последовательности элементов.
    */

    /*const int Q = 20;
    int m[Q];

    for (int i = 0; i < Q; i++)
    {
        m[i] = i + 1;
        cout << m[i] << "  ";
    }

    cout << endl;
    for (int i = 0; i < Q; i++)
    {
        m[i] = i + 1;
        printf("%d  ", m[i]);
    }

    cout << endl;*/
    //--------------------------------------------------------------------------
    /*
    Массив из предыдущей задачи	проинициализировать числами
    в убывающем порядке от 20 до 1.
    Вывести массив на экран в прямой последовательности элементов.
    */
    //// Вариант 1 - инициализация с конца массива
    // for (int i = Q - 1; i >= 0; i--)//i = 20 !!!!  выход за пределы массива
    //{
    //	m[i] = Q - i;
    //	cout << m[i] << "  ";// вывод в обратном порядке
    // }
    // cout << endl;
    //// Вывод массива в прямом порядке
    // for (int i = 0; i < Q; i++) // 20   19   18  17  ... 1
    //{
    //	cout << m[i] << "  ";
    // }
    // cout << endl;
    //// Вариант 2 - инициализация с начала массива
    // for (int i = 0; i < Q; i++)
    //{
    //	m[i] = Q - i;
    // }
    // for (int i = 0; i < Q; i++) // 20   19   18  17  ... 1
    //{
    //	cout << m[i] << "  ";
    // }

    //--------------------------------------------------------------------------

    /*
    Заполнить одномерный массив по следующему принципу:
    пользователь вводит число (например, 3),
    первый элемент массива принимает значение этого числа,
    каждый последующий элемент массива равен предыдущему значению массива,
    умноженному на 2. Например, 3  6  12  24  48
    */

    // const int N = 10;
    // int mas[N];
    // int a;
    ////cout << "\nВведи число: ";
    ////cin >> a;
    ////// Вариант 1 - с использованием дополнительной переменной
    ////for (int i = 0; i < N; i++)
    ////{
    ////	mas[i] = a;
    ////	a *= 2;
    ////}

    ////for (int i = 0; i < N; i++)
    ////{
    ////	cout << mas[i] << "  ";
    ////}

    //// Вариант 2 - без использования дополнительной переменной
    // cout << "\nВведи число: ";
    // cin >> mas[0];
    // for (int i = 1; i < N; i++)
    //{
    //	mas[i] = mas[i-1] * 2;
    // }

    // for (int i = 0; i < N; i++)
    //{
    //	cout << mas[i] << "  ";
    // }

    //--------------------------------------------------------------------------
    /*
    Вывести массив в обратном порядке
    */
    const int N = 10;
    int mas[N]{2, 9, 8, -5, 4, 9, 6, 5, 2, -1524};

    cout << "\nВывод массива в обратном порядке(1): \n";
    for (int i = N - 1; i >= 0; i--)
    {
        cout << mas[i] << "  ";
    }

    cout << "\nВывод массива в обратном порядке(2): \n";
    for (int i = 0; i < N; i++)
    {
        cout << mas[N - i - 1] << "  ";
    }

    cout << "\nВывод массива в прямом порядке: \n";
    for (int i = 0; i < N; i++)
    {
        cout << mas[i] << "  ";
    }
    return 0;
}