#include <iostream>
#include <limits.h>
#include <iomanip> // для использования манипуляторов ввода/вывода
using namespace std;

int main() {
    cout << "Hello World!\n";    // C++
   printf("\nПривет, Мир!\n\n");    // Cи

   // Арифметические операции: +  -  *  / 
   //  %  - остаток целочисленного деления / деление по модулю

   cout << "15 + 2 = "<< 15 + 2 << endl; // 15 + 2 = 17
   cout << "15 - 2 = "<< 15 - 2 << endl; // 15 - 2 = 13
   cout << "15 - 2 = "<< 15 - 2.5 << endl; // 15 - 2 = 12.5
   cout << "15 * 2 = "<< 15 * 2 << endl; // 15 * 2 = 30
   cout << "15 / 2 = "<< 15 / 2 << endl; // 15 / 2 = 7   

   cout << "15 / 2 = "<< 15 / 2.0 << endl; // 15 / 2 = 7.5          // Приведение типа в не явном виде

   cout << "15 / 2 = "<< 15 / (double)2 << endl; // 15 / 2 = 7.5    // Приведение типа в явном виде
   cout << "15 / 2 = "<< (double)15 / 2 << endl; // 15 / 2 = 7.5    // Приведение типа в явном виде

   cout << "15 / 2 = "<< (double)(15 / 2) << endl; // 15 / 2 = 7   // () - самый высокий приоритет выполнения операций
   
   //cout << "15 ^ 2 = "<< 15 ^ 2; // 

   cout << "15 % 2 = " << 15 % 2 << endl; // 15 % 2 = 1

   //cout << "15 % 2 = " << 15 % 2.0 << endl; // ошибка

   cout << "3213546546873344 + 1 = " << 3213546546873344 + 1 << endl;

   cout << "2147483647 + 2 = " << (unsigned)2147483647 + 2 << endl; // Приведение типа в явном виде
   cout << "2147483647 + 2 = " << 2147483647 + 2 << endl; // - 2147483647   Эффект переполнения

   cout << "\nВыделение памяти в байтах : " << sizeof(25);  // 4
   cout << "\nВыделение памяти в байтах : " << sizeof(int); // 4
   cout << "\nВыделение памяти в байтах : " << sizeof(3213546546873344); // 8
   cout << "\nВыделение памяти в байтах : " << sizeof(5.69); // по умолчанию double  8
   cout << "\nВыделение памяти в байтах : " << sizeof((float)5.69);  // 4
   cout << "\nВыделение памяти в байтах : " << sizeof(5.69f);  // 4
   cout << "\nВыделение памяти в байтах : " << sizeof('a'); // 1
   cout << "\nВыделение памяти в байтах : " << sizeof("a"); // 2
   cout << "\nВыделение памяти в байтах : " << sizeof("abcde"); // 6

   cout << "\nСимвол: " << 'a' << "  Код символа: " << (int)'a'; // a   97
   cout << "\nСимвол: " << 'b' << "  Код символа: " << (int)'b'; // b   98
   
   cout << "\nСимвол: " << (char)119 << "  Код символа: " << 119; // w   119


   cout << "\nСимвол: " << 'ф' << "  Код символа: " << (int)(unsigned char)'ф'; // ф   244
   cout << "\nСимвол: " << (char)244 << "  Код символа: " << 244; // 
   
   system("chcp 866>nul");
   cout << "\nСимвол: " << (char)178 << "  Код символа: " << 178; // 

   system("chcp 1251>nul");
   cout << "\nПривет\n";

   // Результат арифметической опреции автоматически приводится к более высокому типу:
   cout << 5 + 1 << endl;//6
   cout << '5' + 1 << endl;//54  - автоматическое приведение типа к int
   cout << 10 / 3. << endl;// 3.3333  - автоматическое приведение типа к double

   cout << "201256" << endl;
   
   cout << '0' << "  " << '0'- 48 << endl;
   cout << (char)('0' + 1) << endl; // 1

   // Константы - диапазон значений для разных типов

   cout << "INT_MAX : " << INT_MAX << endl;
   cout << "ULONG_MAX : " << ULONG_MAX << "  "<< hex << ULONG_MAX << dec << "  " << 0xffffffffUL << endl;
   cout << 10.25f << endl;

   cout << "\n--------------------------\n";

   cout << 10 / 3. << endl;

   // Манипуляторы форматированного вывода

   // 1. setprecision - манипулятор управляет общим количеством выводимых знаков(цифр)

   // Точность значений
   cout << setprecision(20) << 10/3.  // для double - это 15 значащих цифр
       << endl << 10/3.f  << endl     // для float - это 7 значащих цифр
       << setprecision(2) << 10 / 3. << endl << 10 / 3.f << endl;


   cout << 3131654.646645654 * 6465465.46464632131 << endl;

   //2. setiosflags(ios::fixed) - вывод числа с фиксированной точкой

   cout << setprecision(10) << setiosflags(ios::fixed)<< 3131654.646645654 * 6465465.46464632131 << endl;

   cout << 10 / 3. << endl;

   cout << 5 / 2. << endl;

   cout << 326543434564.454546 * 6563544.121234 << endl;

   // Потеря точности
   cout << (2.54e20 + 1 - 2.54e20) << endl;//0
   cout << (2.54e15 + 1 - 2.54e15) << endl;//1
    return 0;
}